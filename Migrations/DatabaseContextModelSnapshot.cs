// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlantNestBackEnd.Models;

#nullable disable

namespace PlantNestBackEnd.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PlantNestBackEnd.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountImage")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("account_image");

                    b.Property<string>("Address")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("created")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("dob");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("email");

                    b.Property<string>("Fullname")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("fullname");

                    b.Property<string>("Password")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("phone");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<string>("SercurityCode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("sercurityCode");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("Username")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("PK__account__3213E83F00B0DDE1");

                    b.HasIndex("RoleId");

                    b.ToTable("account", (string)null);
                });

            modelBuilder.Entity("PlantNestBackEnd.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 0)")
                        .HasColumnName("price");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("PK__cart__3213E83FB7A884B6");

                    b.HasIndex("AccountId");

                    b.ToTable("cart", (string)null);
                });

            modelBuilder.Entity("PlantNestBackEnd.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("CategoryImage")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("category_image");

                    b.Property<string>("CategoryName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("category_name");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("created")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PK__category__3213E83F01300EFA");

                    b.HasIndex("CategoryId");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("PlantNestBackEnd.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<string>("Content")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("created")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int?>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.HasKey("Id")
                        .HasName("PK__comment__3213E83F25ABCA18");

                    b.HasIndex("ProductId");

                    b.ToTable("comment", (string)null);
                });

            modelBuilder.Entity("PlantNestBackEnd.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("created")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("email");

                    b.Property<string>("Message")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("message");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("name");

                    b.Property<string>("Subject")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("subject");

                    b.HasKey("Id")
                        .HasName("PK__contact__3213E83F8D06CF42");

                    b.ToTable("contact", (string)null);
                });

            modelBuilder.Entity("PlantNestBackEnd.Models.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeliveryDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("delivery_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Message")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("message");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<DateTime?>("ReceivingDate")
                        .HasColumnType("date")
                        .HasColumnName("receiving_date");

                    b.Property<string>("RecipientAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("recipient_address");

                    b.Property<string>("RecipientName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("recipient_name");

                    b.Property<string>("RecipientPhone")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("recipient_phone");

                    b.Property<string>("Status")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PK__delivery__3213E83F79CF5C21");

                    b.HasIndex("OrderId");

                    b.ToTable("delivery", (string)null);
                });

            modelBuilder.Entity("PlantNestBackEnd.Models.FavoriteCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.HasKey("Id")
                        .HasName("PK__favorite__3213E83FFFF41E57");

                    b.HasIndex("AccountId");

                    b.ToTable("favoriteCart", (string)null);
                });

            modelBuilder.Entity("PlantNestBackEnd.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("imageUrl");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.HasKey("Id")
                        .HasName("PK__image__3213E83F6EDF4317");

                    b.HasIndex("ProductId");

                    b.ToTable("image", (string)null);
                });

            modelBuilder.Entity("PlantNestBackEnd.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<DateTime?>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("orderDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<TimeSpan?>("OrderTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time")
                        .HasColumnName("orderTime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("payment_method");

                    b.Property<string>("Status")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("status");

                    b.Property<decimal?>("TotalOrder")
                        .HasColumnType("decimal(10, 0)")
                        .HasColumnName("total_order");

                    b.HasKey("Id")
                        .HasName("PK__order__3213E83FCA01C699");

                    b.HasIndex("AccountId");

                    b.ToTable("order", (string)null);
                });

            modelBuilder.Entity("PlantNestBackEnd.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int?>("CommentId")
                        .HasColumnType("int")
                        .HasColumnName("comment_id");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("created")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(10, 0)")
                        .HasColumnName("total_price");

                    b.HasKey("OrderId", "ProductId")
                        .HasName("PK__orderDet__022945F64976148A");

                    b.HasIndex("ProductId");

                    b.ToTable("orderDetail", (string)null);
                });

            modelBuilder.Entity("PlantNestBackEnd.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<decimal?>("CostPrice")
                        .HasColumnType("decimal(10, 0)")
                        .HasColumnName("cost_price");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("ProductName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("product_name");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<decimal?>("SellPrice")
                        .HasColumnType("decimal(10, 0)")
                        .HasColumnName("sell_price");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("supplier_id");

                    b.HasKey("Id")
                        .HasName("PK__product__3213E83FF9D86EBF");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("PlantNestBackEnd.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("created")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("RoleName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("roleName");

                    b.HasKey("Id")
                        .HasName("PK__role__3213E83F69825B13");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("PlantNestBackEnd.Models.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("SupplierName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("supplier_name");

                    b.HasKey("Id")
                        .HasName("PK__supplier__3213E83FED92903D");

                    b.ToTable("supplier", (string)null);
                });

            modelBuilder.Entity("PlantNestBackEnd.Models.Account", b =>
                {
                    b.HasOne("PlantNestBackEnd.Models.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_account_role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PlantNestBackEnd.Models.Cart", b =>
                {
                    b.HasOne("PlantNestBackEnd.Models.Account", "Account")
                        .WithMany("Carts")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("fk_acccount_cart");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("PlantNestBackEnd.Models.Category", b =>
                {
                    b.HasOne("PlantNestBackEnd.Models.Category", "CategoryNavigation")
                        .WithMany("InverseCategoryNavigation")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_category_category");

                    b.Navigation("CategoryNavigation");
                });

            modelBuilder.Entity("PlantNestBackEnd.Models.Comment", b =>
                {
                    b.HasOne("PlantNestBackEnd.Models.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_commnents_product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PlantNestBackEnd.Models.Delivery", b =>
                {
                    b.HasOne("PlantNestBackEnd.Models.Order", "Order")
                        .WithMany("Deliveries")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("fk_order_delivery");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("PlantNestBackEnd.Models.FavoriteCart", b =>
                {
                    b.HasOne("PlantNestBackEnd.Models.Account", "Account")
                        .WithMany("FavoriteCarts")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("fk_acccount_favoriteCart");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("PlantNestBackEnd.Models.Image", b =>
                {
                    b.HasOne("PlantNestBackEnd.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_product_image");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PlantNestBackEnd.Models.Order", b =>
                {
                    b.HasOne("PlantNestBackEnd.Models.Account", "Account")
                        .WithMany("Orders")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("fk_account_order");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("PlantNestBackEnd.Models.OrderDetail", b =>
                {
                    b.HasOne("PlantNestBackEnd.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("fk_order_orderDetails");

                    b.HasOne("PlantNestBackEnd.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("fk_product_orderDetails");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PlantNestBackEnd.Models.Product", b =>
                {
                    b.HasOne("PlantNestBackEnd.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_category_product");

                    b.HasOne("PlantNestBackEnd.Models.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("fk_supplier_product");

                    b.Navigation("Category");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("PlantNestBackEnd.Models.Account", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("FavoriteCarts");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("PlantNestBackEnd.Models.Category", b =>
                {
                    b.Navigation("InverseCategoryNavigation");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("PlantNestBackEnd.Models.Order", b =>
                {
                    b.Navigation("Deliveries");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("PlantNestBackEnd.Models.Product", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("PlantNestBackEnd.Models.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("PlantNestBackEnd.Models.Supplier", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
